schema {
  query: Query
  mutation: Mutation
}

type AddHost {
  ok: Boolean
}

type Appliance {
  id: Int
  name: String
  public: String
}

type ApplianceAttribute implements Attribute {
  type: String
  scope: String
  attr: String
  value: String
  appliance: String
}

interface Attribute {
  type: String
  scope: String
  attr: String
  value: String
}

type Box {
  id: Int
  name: String
  os: String
}

type GlobalAttribute implements Attribute {
  type: String
  scope: String
  attr: String
  value: String
  shadow: String
}

type Host {
  id: Int
  name: String
  rack: String
  rank: String
  appliance: String
  os: String
  box: String
  environment: String
  osaction: String
  installaction: String
  comment: String
  metadata: String
}

type HostAttribute implements Attribute {
  type: String
  scope: String
  attr: String
  value: String
  name: String
  shadow: String
}

input HostInput {
  name: String!
  appliance: String!
  rack: String!
  rank: String!
  box: String = "default"
  osaction: String = "default"
  installaction: String = "default"
  environment: String = false
}

type Interface {
  id: Int
  host: String
  mac: String
  ip: String
  netmask: String
  gateway: String
  name: String
  device: String
  subnet: String
  module: String
  vlanid: Int
  options: String
  channel: String
  main: Int
}

type Mutation {
  addHost(input: HostInput): AddHost
}

type Network {
  id: Int
  name: String
  address: String
  mask: String
  gateway: String
  mtu: String
  zone: String
  dns: String
  pxe: String
}

type Os {
  id: Int
  name: String
}

type Pallet {
  id: Int
  name: String
  version: String
  release: String
  arch: String
  os: String
  url: String
}

type Query {
  allAppliances: [Appliance]
  getAppliance(name: String!): Appliance
  allPallets: [Pallet]
  allOses: [Os]
  allNetworks: [Network]
  allInterfaces: [Interface]
  allBoxes: [Box]
  allAttributes: [GlobalAttribute]
  hostAttributes: [HostAttribute]
  applianceAttributes: [ApplianceAttribute]
  allHosts: [Host]
}
